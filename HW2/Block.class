//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.util.ArrayList;

public class Block {
    public static final double COINBASE = 25.0D;
    private byte[] hash;
    private byte[] prevBlockHash;
    private Transaction coinbase;
    private ArrayList<Transaction> txs;

    public Block(byte[] prevHash, PublicKey address) {
        this.prevBlockHash = prevHash;
        this.coinbase = new Transaction(25.0D, address);
        this.txs = new ArrayList();
    }

    public Transaction getCoinbase() {
        return this.coinbase;
    }

    public byte[] getHash() {
        return this.hash;
    }

    public byte[] getPrevBlockHash() {
        return this.prevBlockHash;
    }

    public ArrayList<Transaction> getTransactions() {
        return this.txs;
    }

    public Transaction getTransaction(int index) {
        return (Transaction)this.txs.get(index);
    }

    public void addTransaction(Transaction tx) {
        this.txs.add(tx);
    }

    public byte[] getRawBlock() {
        ArrayList<Byte> rawBlock = new ArrayList();
        int i;
        if (this.prevBlockHash != null) {
            for(i = 0; i < this.prevBlockHash.length; ++i) {
                rawBlock.add(this.prevBlockHash[i]);
            }
        }

        for(i = 0; i < this.txs.size(); ++i) {
            byte[] rawTx = ((Transaction)this.txs.get(i)).getRawTx();

            for(int j = 0; j < rawTx.length; ++j) {
                rawBlock.add(rawTx[j]);
            }
        }

        byte[] raw = new byte[rawBlock.size()];

        for(int i = 0; i < raw.length; ++i) {
            raw[i] = (Byte)rawBlock.get(i);
        }

        return raw;
    }

    public void finalize() {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(this.getRawBlock());
            this.hash = md.digest();
        } catch (NoSuchAlgorithmException var2) {
            var2.printStackTrace(System.err);
        }

    }
}
