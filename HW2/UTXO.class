//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

import java.util.Arrays;

public class UTXO implements Comparable<UTXO> {
    private byte[] txHash;
    private int index;

    public UTXO(byte[] txHash, int index) {
        this.txHash = Arrays.copyOf(txHash, txHash.length);
        this.index = index;
    }

    public byte[] getTxHash() {
        return this.txHash;
    }

    public int getIndex() {
        return this.index;
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        } else if (this.getClass() != other.getClass()) {
            return false;
        } else {
            UTXO utxo = (UTXO)other;
            byte[] hash = utxo.txHash;
            int in = utxo.index;
            if (hash.length == this.txHash.length && this.index == in) {
                for(int i = 0; i < hash.length; ++i) {
                    if (hash[i] != this.txHash[i]) {
                        return false;
                    }
                }

                return true;
            } else {
                return false;
            }
        }
    }

    public int hashCode() {
        int hash = 1;
        int hash = hash * 17 + this.index;
        hash = hash * 31 + Arrays.hashCode(this.txHash);
        return hash;
    }

    public int compareTo(UTXO utxo) {
        byte[] hash = utxo.txHash;
        int in = utxo.index;
        if (in > this.index) {
            return -1;
        } else if (in < this.index) {
            return 1;
        } else {
            int len1 = this.txHash.length;
            int len2 = hash.length;
            if (len2 > len1) {
                return -1;
            } else if (len2 < len1) {
                return 1;
            } else {
                for(int i = 0; i < len1; ++i) {
                    if (hash[i] > this.txHash[i]) {
                        return -1;
                    }

                    if (hash[i] < this.txHash[i]) {
                        return 1;
                    }
                }

                return 0;
            }
        }
    }
}
